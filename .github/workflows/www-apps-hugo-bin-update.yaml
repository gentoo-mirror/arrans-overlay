name: www-apps/hugo-bin Update

permissions:
  contents: write

on:
  schedule:
    - cron: '10 0 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/www-apps-hugo-bin-update.yaml'

env:
  ebuild_category: www-apps
  ebuild_name: hugo-bin
  repo_owner: gohugoio
  repo_name: hugo
  description: "The worldâ€™s fastest framework for building websites."
  PFN: "hugo"
  EFN: "hugo"
  homepage: "https://gohugo.io/"

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${ebuild_category}/${ebuild_name}"
          mkdir -p $ebuild_dir
          releases=$(curl -s https://api.github.com/repos/${repo_owner}/${repo_name}/releases | jq -r '.[].tag_name')
          
          for release in ${releases}; do
            version=${release#v}
            ebuild_file="${ebuild_dir}/${ebuild_name}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              # Create ebuild script
              {
                echo "# Copyright"
                echo "EAPI=8"
                echo "DESCRIPTION=\"$description\""
                echo "HOMEPAGE=\"$homepage\""
                echo 'IUSE="+extended"'
                echo 'SRC_URI="  '
                echo "  amd64? ( extended? ( https://github.com/${repo_owner}/${repo_name}/releases/download/v\${PV}/${PFN}_extended_\${PV}_Linux-64bit.tar.gz -> \${PN}_extended-\${PV}.amd64.tar.gz ) !extended? ( https://github.com/${repo_owner}/${repo_name}/releases/download/v\${PV}/${PFN}_\${PV}_Linux-64bit.tar.gz -> \${P}.amd64.tar.gz ) )"
                echo "  arm? ( extended? ( https://github.com/${repo_owner}/${repo_name}/releases/download/v\${PV}/${PFN}_extended_\${PV}_linux-arm.tar.gz -> \${PN}_extended-\${PV}.arm.tar.gz ) !extended? ( https://github.com/${repo_owner}/${repo_name}/releases/download/v\${PV}/${PFN}_\${PV}_linux-arm.tar.gz -> \${P}.arm.tar.gz ) )"
                echo "  arm64? ( extended? ( https://github.com/${repo_owner}/${repo_name}/releases/download/v\${PV}/${PFN}_extended_\${PV}_linux-arm64.tar.gz -> \${PN}_extended-\${PV}.arm64.tar.gz ) !extended? ( https://github.com/${repo_owner}/${repo_name}/releases/download/v\${PV}/${PFN}_\${PV}_linux-arm64.tar.gz -> \${P}.arm64.tar.gz ) )"
                echo '" '
                echo "LICENSE=\"Apache-2.0\""
                echo "SLOT=\"0\""
                echo 'KEYWORDS="~amd64 ~arm ~arm64"'
                echo 'RDEPEND="'
                echo '	extended? ('
                echo '		dev-libs/libsass:='
                echo '		>=media-libs/libwebp-1.3.2:='
                echo '	)'
                echo '"'
                echo 'DEPEND="${RDEPEND}"'
                echo "S=\"\${WORKDIR}\""
                echo ""
                echo "src_install() {"
                echo "    exeinto /opt/bin"
                echo "    doexe ${EFN}"
                echo "}"
                echo ""
              } > $ebuild_file

              # Generate the manifest for the new ebuild
              wget https://github.com/${repo_owner}/${repo_name}/releases/download/v${version}/${PFN}_${version}_Linux-64bit.tar.gz -O /tmp/${ebuild_name}-${version}.amd64.tar.gz
              wget https://github.com/${repo_owner}/${repo_name}/releases/download/v${version}/${PFN}_${version}_linux-arm.tar.gz -O /tmp/${ebuild_name}-${version}.arm.tar.gz
              wget https://github.com/${repo_owner}/${repo_name}/releases/download/v${version}/${PFN}_${version}_linux-arm64.tar.gz -O /tmp/${ebuild_name}-${version}.arm64.tar.gz
              wget https://github.com/${repo_owner}/${repo_name}/releases/download/v${version}/${PFN}_extended_${version}_Linux-64bit.tar.gz -O /tmp/${ebuild_name}_extended-${version}.amd64.tar.gz
              #wget https://github.com/${repo_owner}/${repo_name}/releases/download/v${version}/${PFN}_extended_${version}_linux-arm.tar.gz -O /tmp/${ebuild_name}_extended-${version}.arm.tar.gz
              wget https://github.com/${repo_owner}/${repo_name}/releases/download/v${version}/${PFN}_extended_${version}_linux-arm64.tar.gz -O /tmp/${ebuild_name}_extended-${version}.arm64.tar.gz
              # Doesn't exist??  ${ebuild_name}_extended-${version}.arm.tar.gz
              for e in ${ebuild_name}-${version}.amd64.tar.gz ${ebuild_name}-${version}.arm.tar.gz ${ebuild_name}-${version}.arm64.tar.gz ${ebuild_name}_extended-${version}.amd64.tar.gz ${ebuild_name}_extended-${version}.arm64.tar.gz; do
                echo "DIST $e $(stat -c %s "/tmp/${e}") BLAKE2B $(b2sum "/tmp/${e}" | cut -d' ' -f1) SHA512 $(sha512sum "/tmp/${e}" | cut -d' ' -f1)" | tee -a "${ebuild_dir}/Manifest"
                rm "/tmp/${e}"
              done
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ebuild_category}/${ebuild_name}"
          git add "./${ebuild_dir}"
          git commit -m "Add ebuilds for new ${ebuild_name} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
