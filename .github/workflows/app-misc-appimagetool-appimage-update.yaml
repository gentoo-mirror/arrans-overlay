name: app-misc/appimagetool-appimage update

permissions:
  contents: write

on:
  schedule:
    - cron: '5 0 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-misc-appimagetool-appimage-update.yaml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ecn: app-misc
  epn: appimagetool-appimage
  description: "AppImage tool to create AppImages (As an AppImage)"
  homepage: "https://github.com/AppImage/AppImageKit"
  github_owner: AppImage
  github_repo: AppImageKit

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils
          url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
          echo "$url"
          wget "${url}" -O /tmp/g2.deb
          sudo dpkg -i /tmp/g2.deb
          rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${ecn}/${epn}"
          mkdir -p $ebuild_dir
          run_numbers=$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/AppImage/AppImageKit/actions/runs | jq -r '.workflow_runs[].run_number')
          for run_number in ${run_numbers}; do
            echo "Processing run number: $run_number"
            version="0.0.${run_number}"
            ebuild_file="${ebuild_dir}/${epn}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              
              # Create ebuild script
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/app-misc-appimagetool-appimage-update.yaml"
                echo 'EAPI=8'
                echo "DESCRIPTION=\"$description\""
                echo "HOMEPAGE=\"$homepage\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="~amd64 ~x86 ~arm ~arm64"'
                echo 'DEPEND=""'
                echo 'RDEPEND=""'
                echo 'S="${WORKDIR}"'
                echo 'RESTRICT="strip"'
                echo ''
                echo "inherit xdg-utils"
                echo ''
                echo 'SRC_URI="  '
                echo '  amd64? ( https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -> $P.amd64 )'
                echo '  x86? ( https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage -> $P.x86 )'
                echo '  arm? ( https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage -> $P.arm )'
                echo '  arm64? ( https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage -> $P.arm64 )'
                echo '" '
                echo ''
                echo "src_unpack() {"
                echo "  cp \"\${DISTDIR}/\${A}\" \"\${A}\"  || die \"Can't copy archive file\""
                echo "  chmod a+x \"\${A}\"  || die \"Can't chmod archive file\""
                echo "  \"./\${A}\" --appimage-extract appimagetool.desktop  || die \"Can't extract .desktop from appimage\""
                echo "  \"./\${A}\" --appimage-extract usr/share/icons  || die \"Can't extract icons from app image\""
                echo "}"
                echo ""
                echo "src_prepare() {"
                echo "  sed -i 's:^Exec=.*:Exec=/opt/bin/appimagetool:' squashfs-root/appimagetool.desktop"
                echo "  find squashfs-root -type d -exec rmdir -p {} \; "
                echo "  find squashfs-root -type f \( -name index.theme -or -name icon-theme.cache \) -exec rm -v {} \; "
                echo "  eapply_user"
                echo "}"
                echo ""
                echo 'src_install() {'
                echo '  mv -v "./${A}" appimagetool'
                echo '  exeinto /opt/bin'
                echo '  doexe "appimagetool"'
                echo "  insinto /usr/share/applications"
                echo '  doins "./squashfs-root/appimagetool.desktop"'
                echo "  insinto /usr/share/"
                echo '  doins -r "./squashfs-root/usr/share/icons"'
                echo "}"
                echo ""
                echo "pkg_postinst() {"
                echo "  xdg_desktop_database_update"
                echo "}"
                echo ""
              } > $ebuild_file

              # Generate the manifest for the new ebuild
              g2 manifest upsert-from-url "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" "${epn}-${version}.amd64" "${ebuild_dir}/Manifest"
              g2 manifest upsert-from-url "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" "${epn}-${version}.x86" "${ebuild_dir}/Manifest"
              g2 manifest upsert-from-url "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" "${epn}-${version}.arm" "${ebuild_dir}/Manifest"
              g2 manifest upsert-from-url "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage" "${epn}-${version}.arm64" "${ebuild_dir}/Manifest"
              
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ecn}/${epn}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${epn} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
