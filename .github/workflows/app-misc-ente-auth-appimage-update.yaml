name: app-misc/ente-auth-appimage Update

permissions:
  contents: write

on:
  schedule:
    - cron: '0 0 * * *'  
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-misc-ente-auth-appimage-update.yaml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  epn: ente-auth-appimage
  ecn: app-misc
  description: "Ente Auth AppImage"
  homepage: "https://ente.io/blog/auth/"
  repo_owner: ente-io
  repo_name: ente

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils

      - name: Check for new releases
        id: check_releases
        run: |
          tags=$(curl -s https://api.github.com/repos/ente-io/ente/releases | jq -r '.[].tag_name')
          release_tags=$(echo "tags" | grep "^auth-v")
          ebuild_dir="./${ecn}/${epn}"
          mkdir -p $ebuild_dir
          
          for tags in $release_tags; do
            version=${tags#auth-v}
            if [ "${version}" = "${tag}" ]; then
              echo "$version == $tag so there is no auth-v removed skipping"
              continue
            fi
            if ! echo "$version" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((-|_)(alpha|beta|rc|p)[0-9]*)*$'; then
              echo "$tag / $version doesn't match regexp";
              continue; 
            fi
            ebuild_file="${ebuild_dir}/${epn}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              appimage_url="https://github.com/ente-io/ente/releases/download/${tag}/ente-auth-v${version}-x86_64.AppImage"
              
              # Create ebuild script
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/app-misc-ente-auth-appimage-update.yaml"
                echo "EAPI=8"
                echo "DESCRIPTION=\"$description\""
                echo "HOMEPAGE=\"$homepage\""
                echo "SRC_URI=\"${appimage_url} -> \${P}\""
                echo "LICENSE=\"AGPL-3.0\""
                echo "SLOT=\"0\""
                echo "KEYWORDS=\"~amd64\""
                echo "DEPEND=\"\""
                echo "RDEPEND=\"|| ( dev-libs/libappindicator )\""
                echo "S=\"\${WORKDIR}\""
                echo 'RESTRICT="strip"'
                echo ""
                echo "inherit xdg-utils"
                echo ""
                echo "src_unpack() {"
                echo "  cp \"\${DISTDIR}/\${A}\" \"\${A}\"  || die \"Can't copy archive file\""
                echo "  chmod a+x \"\${A}\"  || die \"Can't chmod archive file\""
                echo "  \"./\${A}\" --appimage-extract ente_auth.desktop || die \"Can't extract .desktop from appimage\""
                echo "  \"./\${A}\" --appimage-extract usr/share/icons || die \"Can't extract icons from app image\""
                echo "}"
                echo ""
                echo "src_prepare() {"
                echo "  sed -i 's:^Exec=.*:Exec=/opt/bin/ente_auth:' squashfs-root/ente_auth.desktop"
                echo "  find squashfs-root -type d -exec rmdir -p {} \; "
                echo "  find squashfs-root -type f \( -name index.theme -or -name icon-theme.cache \) -exec rm -v {} \; "
                echo "  eapply_user"
                echo "}"
                echo ""
                echo "src_install() {"
                echo "  exeinto /opt/bin"
                echo '  mv "./${A}" "ente_auth"'
                echo "  doexe ente_auth"
                echo "  insinto /usr/share/applications"
                echo '  doins "./squashfs-root/ente_auth.desktop"'
                echo "  insinto /usr/share/"
                echo '  doins -r "./squashfs-root/usr/share/icons"'
                echo "}"
                echo ""
                echo "pkg_postinst() {"
                echo "    xdg_desktop_database_update"
                echo "}"
                echo ""
              } > $ebuild_file

              wget $appimage_url -O "/tmp/${epn}-${version}"
              for e in "${epn}-${version}"; do
                echo "DIST ${e} $(stat -c %s "/tmp/${e}") BLAKE2B $(b2sum "/tmp/${e}" | cut -d' ' -f1) SHA512 $(sha512sum "/tmp/${e}" | cut -d' ' -f1)" >> $ebuild_dir/Manifest
                rm "/tmp/${e}"
              done
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ecn}/${epn}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${epn} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
