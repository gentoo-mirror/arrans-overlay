name: app-misc/ente-auth-appimage Update

permissions:
  contents: write

on:
  schedule:
    - cron: '0 0 * * *'  
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-misc-ente-auth-appimage-update.yaml'

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils

      - name: Check for new releases
        id: check_releases
        run: |
          releases=$(curl -s https://api.github.com/repos/ente-io/ente/releases | jq -r '.[].tag_name')
          auth_releases=$(echo "$releases" | grep "^auth-v")
          echo "::set-output name=auth_releases::$auth_releases"

      - name: Process each release
        id: process_releases
        run: |
          epn=ente-auth-appimage
          ecn=app-misc
          description="Ente Auth AppImage"
          ebuild_dir="./${ecn}/${epn}"
          mkdir -p $ebuild_dir
          
          for release in ${{ steps.check_releases.outputs.auth_releases }}; do
            version=${release#auth-v}
            ebuild_file="${ebuild_dir}/${epn}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              appimage_url="https://github.com/ente-io/ente/releases/download/${release}/ente-auth-v${version}-x86_64.AppImage"
              
              # Create ebuild script
              {
                echo "# Copyright"
                echo "EAPI=8"
                echo "DESCRIPTION=\"$description\""
                echo "SRC_URI=\"${appimage_url} -> \${P}\""
                echo "LICENSE=\"AGPL-3.0\""
                echo "SLOT=\"0\""
                echo "KEYWORDS=\"~amd64\""
                echo "DEPEND=\"\""
                echo "RDEPEND=\"|| ( dev-libs/libappindicator )\""
                echo "S=\"\${WORKDIR}\""
                echo ""
                echo "inherit xdg-utils"
                echo ""
                echo "src_unpack() {"
                echo "    chmod a+x \"\${DISTDIR}/\${A}\" || die 'Can't find archive file'"
                echo "    \"\${DISTDIR}/\${A}\" --appimage-extract ente_auth.desktop || die 'Can't extract .desktop from appimage'"
                echo "    \"\${DISTDIR}/\${A}\" --appimage-extract usr/share/icons || die 'Can't extract icons from app image'"
                echo "}"
                echo ""
                echo "src_prepare() {"
                echo "    sed -i 's:^Exec=.*:Exec=/opt/bin/ente_auth:' squashfs-root/ente_auth.desktop"
                echo "    eapply_user"
                echo "}"
                echo ""
                echo "src_install() {"
                echo "    exeinto /opt/bin"
                echo '    mv "${DISTDIR}/${P}" "ente_auth"'
                echo "    doexe ente_auth"
                echo "    insinto /usr/share/applications"
                echo '    doins "${DISTDIR}/squashfs-root/ente_auth.desktop"'
                echo "    insinto /usr/share/"
                echo '    doins -r "${DISTDIR}/squashfs-root/usr/share/icons"'
                echo "}"
                echo ""
                echo "pkg_postinst() {"
                echo "    xdg_desktop_database_update"
                echo "}"
                echo ""
              } > $ebuild_file

              wget $appimage_url -O "/tmp/${epn}-${version}"
              for e in "${epn}-${version}"; do
                echo "DIST ${e} $(stat -c %s "/tmp/${e}") BLAKE2B $(b2sum "/tmp/${e}" | cut -d' ' -f1) SHA512 $(sha512sum "/tmp/${e}" | cut -d' ' -f1)" >> $ebuild_dir/Manifest
                rm "/tmp/${e}"
              done
            fi
          done

      - name: Commit and push changes
        run: |
          git add ./app-misc/ente-auth-appimage
          git commit -m "Add ebuilds for new ente-auth-appimage releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
