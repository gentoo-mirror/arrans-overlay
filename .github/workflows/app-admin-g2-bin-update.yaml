name: app-admin/g2-bin Update

permissions:
  contents: write

on:
  schedule:
    - cron: '5 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-admin-g2-bin-update.yaml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ebuild_category: app-admin
  ebuild_name: g2-bin
  github_owner: arran4
  github_repo: g2
  description: "Arrans Gentoo specific tools"
  PFN: "g2"
  EFN: "g2"
  homepage: "https://github.com/arran4/g2/"

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${ebuild_category}/${ebuild_name}"
          mkdir -p $ebuild_dir
          tags=$(curl -s https://api.github.com/repos/${{env.github_owner}}/${{env.github_repo}}/releases | jq -r '.[].tag_name')
          
          for tag in ${tags}; do
            version=${tag#v}
            if [ "${version}" = "${tag}" ]; then
              echo "$version == $tag so there is no V removed skipping"
              continue
            fi
            if ! echo "$version" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((-|_)(alpha|beta|rc|p)[0-9]*)*$'; then
              echo "tag / $version doesn't match regexp";
              continue; 
            fi
            ebuild_file="${ebuild_dir}/${ebuild_name}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then
              # Create ebuild script
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/app-admin-g2-bin-update.yaml"
                echo "EAPI=8"
                echo "DESCRIPTION=\"$description\""
                echo "HOMEPAGE=\"$homepage\""
                echo 'IUSE=""'
                echo 'SRC_URI="'
                echo "  amd64? ( https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/v\${PV}/${PFN}_\${PV}_linux_amd64.tar.gz -> \${P}.amd64.tar.gz )"
                echo "  arm? ( https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/v\${PV}/${PFN}_\${PV}_linux_armv7.tar.gz -> \${P}.arm.tar.gz )"
                echo "  arm64? ( https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/v\${PV}/${PFN}_\${PV}_linux_arm64.tar.gz -> \${P}.arm64.tar.gz )"
                echo "  x86? ( https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/v\${PV}/${PFN}_\${PV}_linux_i386.tar.gz -> \${P}.x86.tar.gz )"
                echo '" '
                echo "LICENSE=\"Unknown\""
                echo "SLOT=\"0\""
                echo 'KEYWORDS="~amd64 ~arm ~arm64 ~x86"'
                echo 'RDEPEND=""'
                echo 'DEPEND="${RDEPEND}"'
                echo "S=\"\${WORKDIR}\""
                echo ""
                echo "src_install() {"
                echo "    exeinto /opt/bin"
                echo "    doexe ${EFN}"
                echo "}"
                echo ""
              } > $ebuild_file

              # Generate the manifest for the new ebuild
              wget https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/${tag}/${PFN}_${version}_linux_amd64.tar.gz -O /tmp/${ebuild_name}-${version}.amd64.tar.gz
              wget https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/${tag}/${PFN}_${version}_linux_armv7.tar.gz -O /tmp/${ebuild_name}-${version}.arm.tar.gz
              wget https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/${tag}/${PFN}_${version}_linux_arm64.tar.gz -O /tmp/${ebuild_name}-${version}.arm64.tar.gz
              wget https://github.com/${{env.github_owner}}/${{env.github_repo}}/releases/download/${tag}/${PFN}_${version}_linux_i386.tar.gz -O /tmp/${ebuild_name}-${version}.x86.tar.gz
              for e in ${ebuild_name}-${version}.amd64.tar.gz ${ebuild_name}-${version}.arm.tar.gz ${ebuild_name}-${version}.arm64.tar.gz ${ebuild_name}-${version}.x86.tar.gz; do
                echo "DIST $e $(stat -c %s "/tmp/${e}") BLAKE2B $(b2sum "/tmp/${e}" | cut -d' ' -f1) SHA512 $(sha512sum "/tmp/${e}" | cut -d' ' -f1)" | tee -a "${ebuild_dir}/Manifest"
                rm "/tmp/${e}"
              done
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ebuild_category}/${ebuild_name}"
          git add "./${ebuild_dir}"
          git commit -m "Add ebuilds for new ${ebuild_name} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
