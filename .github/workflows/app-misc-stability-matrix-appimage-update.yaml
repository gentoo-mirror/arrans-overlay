name: app-misc/stability-matrix-appimage Update

permissions:
  contents: write

on:
  schedule:
    - cron: '35 0 * * *'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/app-misc-stability-matrix-appimage-update.yaml'

env:
  ecn: app-misc
  epn: stability-matrix-appimage
  description: "Multi-Platform Package Manager for Stable Diffusion"
  homepage: "https://lykos.ai"

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils unzip

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${ecn}/${epn}"
          mkdir -p $ebuild_dir
          latest_release=$(curl -s https://api.github.com/repos/LykosAI/StabilityMatrix/releases/latest | jq -r '.tag_name')
          version="${latest_release#v}"
          ebuild_file="${ebuild_dir}/${epn}-${version}.ebuild"
          if [ ! -f "$ebuild_file" ]; then
              
              # Create ebuild script
              {
                echo "# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/"
                echo 'EAPI=8'
                echo "DESCRIPTION=\"$description\""
                echo "HOMEPAGE=\"$homepage\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="~amd64 ~x86 ~arm ~arm64"'
                echo 'DEPEND=""'
                echo 'RDEPEND=""'
                echo 'S="${WORKDIR}"'
                echo 'RESTRICT="strip"'
                echo ''
                echo "inherit xdg-utils"
                echo ''
                echo 'SRC_URI="https://github.com/LykosAI/StabilityMatrix/releases/download/v${PV}/StabilityMatrix-linux-x64.zip -> $P.zip"'
                echo ''
                echo "src_unpack() {"
                echo "  unzip \"\${DISTDIR}/\${A}\" -d \${WORKDIR} || die \"Can't unzip archive file\""
                echo "  chmox a+x ./StabilityMatrix.AppImage || die \"Can't chmod +x AppImage\""
                echo "  ./StabilityMatrix.AppImage --appimage-extract \*.desktop || die \"Can't extract .desktop file from AppImage\""
                echo "  ./StabilityMatrix.AppImage --appimage-extract usr/share/icons || die \"Can't extract icons from AppImage\""
                echo "}"
                echo ""
                echo "src_prepare() {"
                echo "  sed -i 's:^Exec=.*:Exec=/usr/bin/StabilityMatrix.AppImage:' squashfs-root/zone.lykos.stabilitymatrix.desktop"
                echo "  sed -i 's:^TryExec=.*:TryExec=/usr/bin/StabilityMatrix.AppImage:' squashfs-root/zone.lykos.stabilitymatrix.desktop"
                echo "  eapply_user"
                echo "}"
                echo ""
                echo "src_install() {"
                echo '  dobin "${WORKDIR}/StabilityMatrix.AppImage" || die "Failed to install AppImage"'
                echo '  insinto /usr/share/applications'
                echo '  doins "${WORKDIR}/squashfs-root/zone.lykos.stabilitymatrix.desktop" || die "Failed to install .desktop file"'
                echo '  insinto /usr/share/icons'
                echo '  doins -r "${WORKDIR}/squashfs-root/usr/share/icons/hicolor/" || die "Failed to install icons"'
                echo "}"
                echo ""
                echo "pkg_postinst() {"
                echo "  xdg_desktop_database_update"
                echo "}"
                echo ""
              } > $ebuild_file

              # Generate the manifest for the new ebuild
              wget https://github.com/LykosAI/StabilityMatrix/releases/download/${latest_release}/StabilityMatrix-linux-x64.zip -O /tmp/${epn}-${version}.zip
              
              echo "DIST ${epn}-${version}.zip $(stat -c %s "/tmp/${epn}-${version}.zip") BLAKE2B $(b2sum "/tmp/${epn}-${version}.zip" | cut -d' ' -f1) SHA512 $(sha512sum "/tmp/${epn}-${version}.zip" | cut -d' ' -f1)" | tee -a "${ebuild_dir}/Manifest"
              rm "/tmp/${epn}-${version}.zip"
          fi

      - name: Commit and push changes
        run: |
          ebuild_dir="./${ecn}/${epn}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${epn} releases" && 
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
